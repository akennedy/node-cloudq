{"name":"Cloudq","tagline":"Cloudq Job Server in Node","body":"# cloudQ \r\n\r\n[![Build Status](https://secure.travis-ci.org/twilson63/node-cloudq.png)](http://travis-ci.org/twilson63/node-cloudq)\r\n\r\nA http message/job queue that is easy to publish, consume and complete messages.\r\n\r\n## Install and Run Locally\r\n\r\nFirst, you need to install couchdb, you can download couchdb at [http://couchdb.apache.org/](http://couchdb.apache.org/)\r\n\r\n``` sh\r\nnpm install cloudq -g\r\nexport COUCH=http://localhost:5984\r\nexport DB=cloudq\r\nexport TOKEN=foo\r\nexport SECRET=bar\r\nexport PORT=8000\r\n\r\n# load views\r\n\r\ncloudq\r\n```\r\n\r\n## Usage\r\n\r\nA job message queue server, allows your applications to push jobs to a queue, then\r\nworker applications can watch the queue and request for a job, when the worker\r\nreceives the job, it does the work, then sends a complete message back to the server.  Each job as a pre-defined schema that consists of two attributes:\r\n\r\n* klass\r\n* args\r\n\r\nThe klass attribute is a string represents the name of object that you wish to invoke.\r\nThe args attribute is an array of parameters that you wish to provide to that objects perform method.\r\n\r\n### job schema\r\n\r\n``` json\r\n{ \"job\":\r\n  {\r\n    \"klass\": \"Mailer\",\r\n    \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]\r\n  },\r\n  \"priority\": 100\r\n}\r\n```\r\n\r\n### publish \r\n\r\npublishes the job to the queue named `send_mail`\r\n\r\n``` sh\r\ncurl -XPUT -d '{ \"job\": { \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]}}'\r\nhttp://cloudq.example.com/send_mail\r\n```\r\n\r\n### consume \r\n\r\nconsumes the next highest job in the queue\r\n\r\n``` sh\r\ncurl http://cloudq.example.com/send_mail\r\n#>{ \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}], \"id\": \"1\"}\r\n```\r\n\r\n### complete\r\n\r\n``` sh\r\ncurl -XDELETE http://cloudq.example.com/send_mail/1\r\n#>{ \"status\": \"success\"}\r\n```\r\n\r\n# Authorization\r\n\r\nCurrently authorization is done by environment varables:\r\n\r\nTOKEN and SECRET\r\n\r\nTheses env variables should match with basic authentication, per request:\r\n\r\n``` sh\r\ncurl http://token:secret@localhost:3000/foo\r\n``` \r\n\r\nTest Successful Authentication:\r\n\r\n``` sh\r\ncurl -XPOST -d '{ \"job\": { \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]}}' http://token:secret@cloudq.example.com/send_mail\r\n```\r\n\r\n# Logging\r\n\r\nCloudQ uses bunyan as the logger and returns a stream of json, but if you want to put it into a more common format, then you can use the `bunyan` command to pipe the json into a readable format.\r\n\r\n```\r\nnpm install bunyan -g\r\ncloudq | bunyan\r\n\r\n```\r\nProduces:\r\n\r\n```\r\n2013-11-05T22:01:23.911Z]  INFO: cloudq/4187 on thing-4.local:\r\n    0: {\r\n      \"ok\": true,\r\n      \"id\": \"_design/dequeue\",\r\n      \"rev\": \"17-d66392bf5441a2cae9bf4c52700cfeff\"\r\n    }\r\n    --\r\n```\r\n\r\nfor a shorter format\r\n\r\n```\r\ncloudq | bunyan -o short`\r\n```\r\n\r\n# NewRelic\r\n\r\nCloudQ is NewRelic Ready, simply supply an ENV Var for your New Relic key and you should be good to go.\r\n\r\n```\r\nNEWRELIC_KEY=XXXX cloudq | bunyan\r\n```\r\n\r\n---\r\n\r\n# Deploy\r\n\r\n## Deploy to nodejitsu\r\n\r\n``` sh\r\nmkdir mycloudq\r\ncd mycloudq\r\nnpm init\r\n# edit package.json and set \"node\": \"~0.6.x\"\r\nnpm install cloudq --save\r\necho 'require(\"cloudq/server\");' >> server.js\r\njitsu databases create couch cloudq\r\njitsu env set COUCH http://xxxx263878962530.iriscouch.com:5984\r\njitsu env set DB cloudq\r\njitsu env set TOKEN foo\r\njitsu env set SECRET bar\r\n\r\njitsu deploy\r\n```\r\n\r\n## Deploy to heroku\r\n``` sh\r\n# create an iriscouch account\r\nmkdir mycloudq\r\ncd mycloudq\r\nnpm init\r\n# edit package.json and set \"node\": \"~0.6.x\"\r\nnpm install cloudq --save\r\necho 'web: ./node_modules/cloudq/bin/cloudq' >> Procfile\r\necho 'node_modules' >> .gitignore\r\ngit init\r\ngit add .\r\ngit commit -am \"first commit\"\r\nheroku create\r\nheroku config:add COUCH=http://mydb.iriscouch.com\r\nheroku config:add DB=cloudq\r\nheroku config:add TOKEN=foo\r\nheroku config:add SECRET=bar\r\n\r\ngit push heroku master\r\n```\r\n\r\n## Tests\r\n\r\n``` sh\r\nnpm test\r\n```\r\n\r\n## License\r\n\r\nsee LICENSE\r\n\r\n## Contributing\r\n\r\n### GOALS\r\n\r\n1. ONLY THREE CORE API METHODS\r\n\r\n* POST /queue - PUBLISH a JOB on the QUEUE\r\n* GET /queue - CONSUME a JOB\r\n* DELETE /queue/id - Mark JOB as Completed\r\n\r\n### TODO\r\n\r\n* tokens authorization\r\n* create acl for queues, views, bulk updates\r\n\r\npull requests welcome","google":"UA-9459466-2","note":"Don't delete this file! It's used internally to help with page regeneration."}