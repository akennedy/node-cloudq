{"body":"# cloudq server -> (relax)\r\n\r\n[![Build Status](https://secure.travis-ci.org/twilson63/node-cloudq.png)](http://travis-ci.org/twilson63/node-cloudq)\r\n\r\nA high performance/persistent http job queue that is easy to enqueue and dequeue messages in any language or platform.\r\n\r\nUsing CouchDb as its backend, cloudq allows you to relax when managing background jobs, simply queue your job, let your workers dequeue, process\r\nand complete.\r\n\r\n## Install and Run Locally\r\n\r\n``` sh\r\n# create your couchdb instance\r\nnpm install cloudq -g\r\nexport DB_URL=http://localhost:5984/cloudq\r\nexport ADMIN_URL=http://admin:pass@localhost:5984/cloudq\r\ncloudq\r\n```\r\n\r\n## Usage\r\n\r\n### job schema\r\n\r\n``` json\r\n{ \"job\":\r\n  {\r\n    \"klass\": \"Mailer\",\r\n    \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]\r\n  }\r\n}\r\n```\r\n\r\n### enqueue\r\n\r\n``` sh\r\ncurl -XPUT -d '{ \"job\": { \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]}}'\r\nhttp://cloudq.example.com/send_mail\r\n```\r\n\r\n### dequeue\r\n\r\n``` sh\r\ncurl http://cloudq.example.com/send_mail\r\n#>{ \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}], \"id\": \"1\"}\r\n```\r\n\r\n### complete\r\n\r\n``` sh\r\ncurl -XDELETE http://cloudq.example.com/send_mail/1\r\n#>{ \"status\": \"success\"}\r\n```\r\n\r\n# Authorization\r\n\r\n1. Create admin user in couchdb\r\n2. Grant admin access to your couchdb documents\r\n3. Your cloudq clients will need to auth with couchdb admin\r\n\r\nExample:\r\n\r\n``` sh\r\ncurl -XPOST -d '{ \"job\": { \"klass\": \"Mailer\", \"args\": [{\"to\": \"foo@email.com\", \"subject\": \"hello\"}]}}' http://admin:pass@cloudq.example.com/send_mail\r\n```\r\n\r\n---\r\n\r\n# How to deploy to the cloud\r\n\r\n## Deploy to nodejitsu\r\n\r\n``` sh\r\nmkdir mycloudq\r\ncd mycloudq\r\nnpm init\r\n# edit package.json and set \"node\": \"~0.6.x\"\r\nnpm install cloudq --save\r\necho 'require(\"cloudq\")();' >> server.js\r\njitsu databases create couch cloudq\r\njitsu env set DB_URL http://xxxx263878962530.iriscouch.com:5984/cloudq\r\njitsu deploy\r\n```\r\n\r\n## Deploy to heroku\r\n``` sh\r\n# create an iriscouch account\r\nmkdir mycloudq\r\ncd mycloudq\r\nnpm init\r\n# edit package.json and set \"node\": \"~0.6.x\"\r\nnpm install cloudq --save\r\necho 'require(\"cloudq\")();' >> server.js\r\necho 'web: node server.js' >> Procfile\r\necho 'node_modules' >> .gitignore\r\ngit init\r\ngit add .\r\ngit commit -am \"first commit\"\r\nheroku create --stack cedar\r\nheroku config:add DB_URL=http://mydb.iriscouch.com/cloudq\r\nheroku config:add ADMIN_URL=http://admin:pass@mydb.iriscouch.com/cloudq\r\ngit push heroku master\r\n```\r\n\r\n## Deploy to cloudfoundry\r\n\r\n``` sh\r\n# create an iriscouch account\r\nmkdir mycloudq\r\ncd mycloudq\r\nnpm init\r\n# edit package.json and set \"node\": \"~0.6.x\"\r\nnpm install cloudq --save\r\necho 'require(\"cloudq\")();' >> server.js\r\nvmc push mycloudq --no-start\r\nvmc env-add DB_URL=http://mydb.iriscouch.com/cloudq\r\nvmc env-add ADMIN_URL=http://admin:pass@mydb.iriscouch.com/cloudq\r\n\r\n```\r\n\r\n## Tests\r\n\r\n``` sh\r\nmocha\r\n```\r\n\r\n## License\r\n\r\nsee LICENSE\r\n\r\n## Contributing\r\n\r\nGOALS\r\n\r\n1. ONLY THREE API METHODS\r\n\r\n* POST - PUSH a JOB on the QUEUE\r\n* GET - DEQUEUE a JOB\r\n* DELETE - MARK JOB as Completed\r\n\r\n2. Extendability should be external\r\n\r\n* UI is in another repo cloudq-web\r\n\r\nFEATURES to add\r\n\r\n* Prioritize jobs (Jobs should be dequeued based on priority)\r\n* Expiration of Jobs (Jobs should be purges after xx hours)\r\n\r\npull requests are welcome\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Cloudq","google":"UA-9459466-2","tagline":"Cloudq Job Server in Node"}